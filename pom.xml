<?xml version="1.0" encoding="UTF-8"?>
<!--
TakeOut：

    专题一：软件开发流程
        需求分析（需求规格说明书，产品原型）  -> 设计（UI设计，数据库设计，接口设计）
        -> 编码（项目代码，单元测试）       -> 测试（测试用例，测试报告）     -> 软件环境安装，配置

    专题二：需求分析
        一、项目介绍：
            - 定位：专门为餐饮企业（餐厅，饭店）定制的一款软件产品
                · 管理端 - 外卖商家使用
                · 用户端 - 点餐用户使用
            - 功能架构：体现项目中厌恶功能模块
                · 管理段：员工管理 分类管理 菜品管理 套餐管理 订单管理 工作台 数据统计 来单提醒
                · 用户端：微信登录 商品浏览 购物车 用户下单 微信支付 历史订单 地址管理 用户催单
            - 产品原型：用于展示项目的业务功能，一般由产品经理进行设计
            - 技术选型：展示项目中使用到的技术框架和中间件等
                · 用户层：node.js vue.js ElementUI 微信小程序 apache-echarts
                · 网关层：Nginx
                · 应用层：SpringBoot SpringMVC SpringTask httpclient SpringCache JWT...
                · 数据层：MySQL Redis MyBatis...
                · 工具：Git Maven Junit Postman

    专题三： 设计
        一、前端：管理端（Web）；用户端（小程序）
            前端工程基于 nginx 运行，
        二、后端：
            1、创建初始项目结构：
                - TakeOut：maven 父工程，统一管理依赖版本，聚合其他子模块
                    - sky_common：公共模块，存放一些公共的类，比如工具类，常量类，枚举类，异常类，日志类，配置类...
                    - sky_pojo：实体类模块，存放一些实体类，比如员工，分类，菜品，套餐，订单，地址...
                    - sky_server：服务端模块，存放一些服务类，比如员工服务，分类服务，菜品服务，套餐服务，订单服务，地址服务...
            2、使用Git进行项目代码的版本控制：
                - 创建Git本地仓库：
                    在菜单找到VCS，点击创建Git仓库
                    选择项目目录
                    之后点击commit（提交）即可

                - 创建Git远程仓库
                    在Gitee里创建一个仓库，并复制URL

                - 将本地文件推送到Git远程仓库
                    在Idea中点击push，内部仓库：
                    Wakadori    Li20050915_

        三、后端数据库搭建
            通过的数据库建表语句创建数据库表结构
            employee 员工表  |  category 分类表  |  dish 菜品表  |  dish_flavor 菜品口味表  |  setmeal 套餐表  |  setmeal_dish 套餐菜品关系表
            user     用户表  |  address  地址表  |  order 订单表 |  order_detail 订单明细表 | shopping_cart 购物车表

        四、前后端联调：
            后端的初始工程中已经实现了登录功能，直接进行前后端联调测试即可
            - Controller：
                · 接受并封装数据   · 调用service方法查询数据库  · 封装结果并相应
            - Service：
                · 调用mapper查询数据库  · 密码比对            · 返回结果
            - Mapper：
                · 封装SQL语句
            Tip：管理端发出的请求统一使用/admin  |  用户端发出的请求统一使用/user

        五、密码加密：
            使用：MD5加密方式对明文密码进行加密
            步骤：
                - 修改数据库中的明文密码，改为MD5加密后的密文
                    select * from takeout.employee;
                - 修改Java代码，前端提交的密码进行MD5加密后，再和数据库中密码比对
                    在EmployeeServiceImpl类中，修改login方法
                    password = DigestUtils.md5DigestAsHex(password.getBytes());

        六、接口设计和接口导入
            1. 前后端分离开发流程：
                定制接口 -> 前端开发/后端开发 -> 联调 -> 提测
            2. 操作步骤：
                将课程资料中提供的项目接口导入YApi
                创建好：苍穹外卖-管理端接口 和 苍穹外卖-用户端接口
                点击管理\用户端接口，数据管理->数据导入（选择Json）->导入（资料里）
                之后就可以根据接口来编写后端代码了
            3. Swagger
                是一种高效的测试接口管理工具（ApiFox也自带）
                导入依赖：knife4j-spring-boot-starter
                在配置类中添加Swagger配置：
                配置Swagger：
                TODO：   @Bean
                        public OpenAPI openAPI() {
                            return new OpenAPI().info(new Info().title("苍穹外卖项目接口文档")
                            .version("2.0").description("苍穹外卖项目接口文档"));}
                实现：http://localhost:8080/doc.html#/home
            4. Swagger3的相关注解：
                @Tag    ：   用在类上，例如Controller，表示对类的说明   （原@Api,tags->name）
                @Schema ：   用在类 / 属性上，例如Entity、DTO、VO，表示对类的说明，以及对属性的说明  （原@ApiModel 和 @ApiModelProperty）
                @Operation  ：   用在方法上，例如Controller的方法，表示对方法的说明  （原@ApiOperation,value->summary）
                为pojo所有类都加上@Schema注解
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.2</version>
    </parent>

    <groupId>com.atguigu</groupId>
    <artifactId>TakeOut</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>sky_common</module>
        <module>sky_pojo</module>
        <module>sky_server</module>
    </modules>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <mybatis.spring>3.0.3</mybatis.spring>
        <lombok>1.18.30</lombok>
        <fastjson2>2.0.47</fastjson2>
        <commons.lang3>3.14.0</commons.lang3>
        <druid>1.2.21</druid>
        <pagehelper>1.4.7</pagehelper>
        <aliyun.sdk.oss>3.17.4</aliyun.sdk.oss>
        <knife4j>4.3.0</knife4j>
        <aspectj>1.9.21</aspectj>
        <jjwt-api>0.12.5</jjwt-api>
        <jaxb-api>4.0.1</jaxb-api>
        <poi>5.2.5</poi>
        <wechatpay>0.4.8</wechatpay>
    </properties>

    <!-- 配置阿里云Maven镜像 -->
    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun</name>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid}</version>
            </dependency>

            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok}</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba.fastjson2</groupId>
            <artifactId>fastjson2</artifactId>
            <version>${fastjson2}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang3}</version>
        </dependency>

        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <version>${aliyun.sdk.oss}</version>
        </dependency>

        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>
            <version>${knife4j}</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj}</version>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jjwt-api}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt-api}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jjwt-api}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>${jaxb-api}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>${poi}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${poi}</version>
        </dependency>

        <!--  微信支付  -->
        <dependency>
            <groupId>com.github.wechatpay-apiv3</groupId>
            <artifactId>wechatpay-apache-httpclient</artifactId>
            <version>${wechatpay}</version>
        </dependency>

        <!-- knife4j的依赖 -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>
            <version>4.3.0</version>
        </dependency>
    </dependencies>
</project>